{"format":"Orc1","code":[-15,-116,-14,100,-16,10,-64,2,0,0,32,-67,-113,96,8,111,-113,112,2,-49,-113,-128,5,-96,0,64,4,96,4,112,15,-1,-113,-112,2,-49,-15,68,1,-118,32,-115,-16,70,33,-115,1,-102,-16,-86,2,97,31,100,0,40,-32,32,2,113,31,116,0,36,-32,30,33,-67,-112,11,32,-67,4,0,3,97,3,113,-113,-128,2,-49,-15,68,16,10,2,97,-113,-128,2,-49,-15,68,16,10,2,97,-113,-128,2,-49,-15,68,16,10,3,98,2,113,-113,-128,2,-49,-15,68,16,10,2,98,-113,-128,2,-49,-15,68,16,10,3,98,2,113,-113,-128,2,-49,-15,68,16,10,2,97,-113,-128,2,-49,-15,68,16,10,2,97,-113,-128,2,-49,-15,68,3,97,3,113,16,10,1,-96,33,-67,-112,11,32,-67,4,0,56,-128,-48,-70,56,-109,-48,-60,4,1,-64,-60,58,-111,-48,-60,60,-108,-48,-60,4,1,-113,-128,8,111,1,-112,-15,124,33,-67,-112,11,60,96,-48,-40,4,-96,-112,11,-113,-96,0,39,50,106,-48,-28,4,-96,-112,11,60,112,-48,-20,4,-96,-112,11,-113,-96,0,35,50,122,-48,-8,4,-96,-112,11,1,70,1,87,31,82,0,40,16,84,1,69,31,67,0,8,31,84,0,8,90,-124,4,65,24,69,21,-92,29,-96,29,-96,-112,11,1,6,1,23,31,18,0,40,16,16,1,1,31,3,0,8,31,20,0,8,82,-128,4,49,24,49,56,-111,-47,60,22,35,-63,64,28,48,21,35,114,-128,-112,11,60,96,-47,76,4,-96,-112,11,-113,-96,0,39,50,106,-47,88,4,-96,-112,11,60,112,-47,96,4,-96,-112,11,-113,-96,0,35,50,122,-47,108,4,-96,-112,11,1,70,1,87,31,82,0,40,16,84,1,69,90,-124,-112,11,1,6,1,23,31,18,0,40,16,16,1,1,121,-128,-112,11,56,96,-47,-108,-113,96,2,-80,-113,112,8,111,-113,-128,0,40,-113,-112,0,36,0,16,56,-96,-31,-82,-113,96,2,-64,0,6,0,0,-113,0,0,0,-113,16,0,0,-113,32,5,-96,-125,48,8,111,-113,64,0,1,21,67,-121,65,2,-49,-113,64,0,1,25,52,2,17,-113,64,0,1,21,67,-121,65,2,-49,-113,64,0,1,25,52,2,17,-113,64,0,1,21,67,-121,65,2,-49,-113,64,0,1,25,52,2,17,-113,64,0,1,21,67,-121,65,2,-49,-113,64,0,1,25,52,2,17,-113,64,0,1,21,67,-121,65,2,-49,-113,64,0,1,25,52,2,17,-113,64,0,1,21,67,-121,65,2,-49,-113,64,0,1,25,52,2,17,-113,64,0,1,21,67,-121,65,2,-49,-113,64,0,1,25,52,2,17,-113,64,0,1,21,67,-121,65,2,-49,-113,64,0,1,25,52,2,17,2,1,52,18,-31,-70,-113,96,2,-49,-113,112,8,111,-113,-128,5,-96,0,64,-112,11,0,48,32,-67,4,96,4,112,15,-1,32,109,-113,-128,8,111,-15,68,56,-96,-46,126,4,99,-62,-128,4,96,0,59,33,109,31,98,0,4,31,114,0,4,4,-124,4,-108,0,52,31,99,0,4,31,115,0,4,2,97,31,100,0,40,-30,110,2,113,31,116,0,36,-30,108,0,53,33,-67,-112,11],"data":[47,100,97,116,97,47,103,117,110,46,99,101,108,108,115,0,70,73,76,69,32,78,79,84,32,70,79,85,78,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"graphics":[],"sourceName":"/src/games/life.asm","debugInfo":{"debugStrings":[],"assemblyFile":"/src/games/life.asm","assemblySource":".data\nINIT_FILE: \"/data/gun.cells\"\nNOT_FOUND: \"FILE NOT FOUND\"\nOLD_WORLD: .byte 1440 # 40x36 \u003d 1440 bytes\nNEW_WORLD: .byte 1440\n\n.text\nmain:\n    jal load_file\n    main_loop:\n        jal write_to_display\n        jal update\n        j main_loop\n    sys exit\n\nupdate:\n    push ra\n\n    # copy NEW_WORLD to OLD_WORLD\n    la a0 NEW_WORLD\n    la a1 OLD_WORLD\n    li a2 1440\n    sys memcopy\n\n    seti a0 0 # col\n    seti a1 0 # row\n    update_row_loop:\n        nop\n        update_col_loop:\n\n            # get the old val of the cell\n            la a3 OLD_WORLD\n            jal get_byte_val\n            mov a2 rv\n\n            # get neighbor count of the cell\n            push a2\n            jal get_neighbor_count\n            pop a2\n            mov a3 rv\n\n            # update the cell in the new world\n            jal update_new_world_cell\n\n            inc a0\n            modi a0 40\n            jnz update_col_loop\n        inc a1\n        modi a1 36\n        jnz update_row_loop\n    pop ra\n    ret\n\n######################################################################\n# get_neighbor_count(col, row) -\n#\n# Returns the count of neighbors that are alive surrounding the cell\n# col, row\n#\n# Mutates t0\n#\n######################################################################\nget_neighbor_count:\n    push ra\n\n    seti t0 0\n\n    # col - 1, row - 1\n    dec a0\n    dec a1\n    li a2 OLD_WORLD\n    jal get_byte_val\n    add t0 rv\n\n    # col, row - 1\n    inc a0\n    li a2 OLD_WORLD\n    jal get_byte_val\n    add t0 rv\n\n    # col + 1, row - 1\n    inc a0\n    li a2 OLD_WORLD\n    jal get_byte_val\n    add t0 rv\n\n    # col - 1, row\n    dec a0 2\n    inc a1\n    li a2 OLD_WORLD\n    jal get_byte_val\n    add t0 rv\n\n    # col + 1, row\n    inc a0 2\n    li a2 OLD_WORLD\n    jal get_byte_val\n    add t0 rv\n\n    # col - 1, row + 1\n    dec a0 2\n    inc a1 1\n    li a2 OLD_WORLD\n    jal get_byte_val\n    add t0 rv\n\n    # col, row + 1\n    inc a0\n    li a2 OLD_WORLD\n    jal get_byte_val\n    add t0 rv\n\n    # col + 1, row + 1\n    inc a0\n    li a2 OLD_WORLD\n    jal get_byte_val\n    dec a0\n    dec a1\n    add t0 rv\n\n    mov rv t0\n\n    pop ra\n    ret\n\n######################################################################\n# update_new_world_cell(col, row, old_val, neighbor_count) -\n#\n# Returns the count of neighbors that are alive surrounding the cell\n# col, row\n#\n######################################################################\nupdate_new_world_cell:\n    push ra\n    seti t0 0 # assume value will be zero\n\n    # if current value is zero\n    eqi a2 0\n    jz update_new_world_cell_non_zero\n        # curr val is zero, so if neighbor count is three\n        eqi a3 3\n        jz update_new_world_cell_done\n        # set new value to 1\n        seti t0 1\n        j update_new_world_cell_done\n    update_new_world_cell_non_zero:\n        # curr val is one, so if neighbor count is greater than one\n        gti a3 1\n        jz update_new_world_cell_done\n        # and less than 4\n        lti a3 4\n        jz update_new_world_cell_done\n        # set new value to 1\n        seti t0 1\n    update_new_world_cell_done:\n    la a2 NEW_WORLD\n    mov a3 t0\n    jal set_byte_val\n    pop ra\n    ret\n\n######################################################################\n# get_bit_val(col, row, arr) -\u003e 0 or 1\n#\n# Returns the bit value the cell[col, row] in the array arr\n#\n# Mutates a0, a1\n#\n######################################################################\nget_bit_val:\n\n    # If the col or row is out of bounds, return zero\n    lti a0 0\n    jz get_bit_val_row_gt_zero\n      seti rv 0\n      ret\n    get_bit_val_row_gt_zero:\n\n    li rv 39\n    gt a0 rv\n    jz get_bit_val_row_gt_39\n      seti rv 0\n      ret\n    get_bit_val_row_gt_39:\n\n    lti a1 0\n    jz get_bit_val_col_gt_zero\n      seti rv 0\n      ret\n    get_bit_val_col_gt_zero:\n\n    li rv 35\n    gt a1 rv\n    jz get_bit_val_col_lt_35\n      seti rv 0\n      ret\n    get_bit_val_col_lt_35:\n\n\n    # compute offset in array\n    mov t4 a0\n    mov t5 a1\n    muli t5 40\n    add t5 t4\n    mov t4 t5\n\n\n    # compute byte offset in array\n    divi t4 8\n\n    # compute bit offset in byte\n    modi t5 8\n\n    # load the byte\n    lbr rv a2 t4\n\n    # mask the bit\n    seti t4 1\n    shl t4 t5\n    and rv t4\n\n    # convert to 1 or 0\n    lnot rv\n    lnot rv\n\n    ret\n\n######################################################################\n# set_bit_val(col, row, arr, val)\n#\n# Sets the bit value the cell[col, row] in the array arr\n#\n# Mutates t0, t1, t2\n#\n######################################################################\nset_bit_val:\n    mov t0 a0\n    mov t1 a1\n\n    # compute offset in array into t0 and t1\n    muli t1 40\n    add t1 t0\n    mov t0 t1\n\n    # compute byte offset in array in t0\n    divi t0 8\n\n    # compute bit offset in byte in t1\n    modi t1 8\n\n    # load the byte value into t2\n    lbr t2 a2 t0\n\n    # compute bit-mask in t3\n    seti t3 1\n    shl t3 t1\n\n    # test if the value is 1 or 0\n    eqi a3 1\n    jz set_bit_val_zero\n      # new val is 1 so or current byte w/t0\n      or t2 t3\n      j set_bit_val_end\n    set_bit_val_zero:\n      # new val is 0 so and current byte w/~t0\n      not t3\n      and t2 t3\n    set_bit_val_end:\n\n    # save the byte back to memory\n    sbr t2 a2 t0\n    ret\n\n######################################################################\n# get_byte_val(col, row, arr) -\u003e 0 or 1\n#\n# Returns the bit value the cell[col, row] in the array arr\n#\n# Mutates a0, a1\n#\n######################################################################\nget_byte_val:\n\n    # If the col or row is out of bounds, return zero\n    lti a0 0\n    jz get_byte_val_row_gt_zero\n      seti rv 0\n      ret\n    get_byte_val_row_gt_zero:\n\n    li rv 39\n    gt a0 rv\n    jz get_byte_val_row_gt_39\n      seti rv 0\n      ret\n    get_byte_val_row_gt_39:\n\n    lti a1 0\n    jz get_byte_val_col_gt_zero\n      seti rv 0\n      ret\n    get_byte_val_col_gt_zero:\n\n    li rv 35\n    gt a1 rv\n    jz get_byte_val_col_lt_35\n      seti rv 0\n      ret\n    get_byte_val_col_lt_35:\n\n\n    # compute offset in array\n    mov t4 a0\n    mov t5 a1\n    muli t5 40\n    add t5 t4\n    mov t4 t5\n\n    # load the byte\n    lbr rv a2 t4\n\n    ret\n\n\n######################################################################\n# set_byte_val(col, row, arr, val)\n#\n# Sets the bit value the cell[col, row] in the array arr\n#\n# Mutates t0, t1, t2\n#\n######################################################################\nset_byte_val:\n    mov t0 a0\n    mov t1 a1\n\n    # compute offset in array into t0 and t1\n    muli t1 40\n    add t1 t0\n    mov t0 t1\n\n    # save the byte back to memory\n    sbr a3 a2 t0\n    ret\n\n\nload_file:\n    eqi a0 0\n    jz file_given\n        # no file given, load the default file into the new world\n        li a0 INIT_FILE\n    file_given:\n    li a1 NEW_WORLD\n    li a2 40    # 40 cols\n    li a3 36    # 36 rows\n    sys rfile\n\n    eqi rv 0\n    jnz load_file_found\n        li a0 NOT_FOUND\n        sys wstr\n        sys exit\n\n    load_file_found:\n    li t0 0\n    li t1 0\n    li t2 1440\n    \n    load_file_decode_loop:\n    lbo t3 t0 NEW_WORLD\n    li  t4 1\n    and t4 t3\n    sbo t4 t1 OLD_WORLD\n    li  t4 1\n    shr t3 t4\n    inc t1\n\n    li  t4 1\n    and t4 t3\n    sbo t4 t1 OLD_WORLD\n    li  t4 1\n    shr t3 t4\n    inc t1\n\n    li  t4 1\n    and t4 t3\n    sbo t4 t1 OLD_WORLD\n    li  t4 1\n    shr t3 t4\n    inc t1\n\n    li  t4 1\n    and t4 t3\n    sbo t4 t1 OLD_WORLD\n    li  t4 1\n    shr t3 t4\n    inc t1\n\n    li  t4 1\n    and t4 t3\n    sbo t4 t1 OLD_WORLD\n    li  t4 1\n    shr t3 t4\n    inc t1\n\n    li  t4 1\n    and t4 t3\n    sbo t4 t1 OLD_WORLD\n    li  t4 1\n    shr t3 t4\n    inc t1\n\n    li  t4 1\n    and t4 t3\n    sbo t4 t1 OLD_WORLD\n    li  t4 1\n    shr t3 t4\n    inc t1\n\n    li  t4 1\n    and t4 t3\n    sbo t4 t1 OLD_WORLD\n    li  t4 1\n    shr t3 t4\n    inc t1\n\n    inc t0\n    lt  t1 t2\n    jnz load_file_decode_loop\n\n    # copy OLD_WORLD to NEW_WORLD\n    la a0 OLD_WORLD\n    la a1 NEW_WORLD\n    li a2 1440\n    sys memcopy\n\n    ret\n\nwrite_to_display:\n# write to display\nsys fbreset   # reset the frame buffer\n    push ra\n\n    seti a0 0 # col\n    seti a1 0 # row\n    write_to_display_row_loop:\n        nop\n        write_to_display_col_loop:\n\n            # store col, row\n            push a0\n\n            la a2 NEW_WORLD\n            jal get_byte_val\n        \n            # set the color to DARK or WHITE depending on the bit val\n            eqi rv 0\n            jz write_to_display_set_dark\n              seti a0 3\n              j write_to_display_set_end\n            write_to_display_set_dark:\n              seti a0 0\n            write_to_display_set_end:\n            sys scolor\n        \n            # restore col, row\n            pop a0\n        \n            # draw a 4x4 square scaled by 2 position lens\n            muli a0 4        \n            muli a1 4\n            seti a2 4\n            seti a3 4        \n            sys fbrect\n\n            # restore a0 and a1\n            divi a0 4\n            divi a1 4\n\n            inc a0\n            modi a0 40\n            jnz write_to_display_col_loop\n        inc a1\n        modi a1 36\n        jnz write_to_display_row_loop\n    sys fbflush   # sync the screen\n    pop ra\n    ret","assemblyLineNumbers":[9,9,11,11,12,12,13,13,14,14,17,17,20,20,20,20,21,21,21,21,22,22,22,22,23,23,25,25,26,26,28,28,32,32,32,32,33,33,34,34,37,37,38,38,39,39,40,40,43,43,45,45,46,46,46,46,47,47,48,48,49,49,49,49,50,50,51,51,52,52,64,64,66,66,69,69,70,70,71,71,71,71,72,72,73,73,76,76,77,77,77,77,78,78,79,79,82,82,83,83,83,83,84,84,85,85,88,88,89,89,90,90,90,90,91,91,92,92,95,95,96,96,96,96,97,97,98,98,101,101,102,102,103,103,103,103,104,104,105,105,108,108,109,109,109,109,110,110,111,111,114,114,115,115,115,115,116,116,117,117,118,118,119,119,121,121,123,123,124,124,134,134,135,135,138,138,139,139,141,141,142,142,144,144,145,145,148,148,149,149,151,151,152,152,154,154,156,156,156,156,157,157,158,158,159,159,160,160,173,173,174,174,175,175,176,176,179,179,179,179,180,180,181,181,182,182,183,183,186,186,187,187,188,188,189,189,192,192,192,192,193,193,194,194,195,195,196,196,201,201,202,202,203,203,203,203,204,204,205,205,209,209,209,209,212,212,212,212,215,215,218,218,219,219,220,220,223,223,224,224,226,226,237,237,238,238,241,241,241,241,242,242,243,243,246,246,246,246,249,249,249,249,252,252,255,255,256,256,259,259,260,260,262,262,263,263,266,266,267,267,271,271,272,272,285,285,286,286,287,287,288,288,291,291,291,291,292,292,293,293,294,294,295,295,298,298,299,299,300,300,301,301,304,304,304,304,305,305,306,306,307,307,308,308,313,313,314,314,315,315,315,315,316,316,317,317,320,320,322,322,334,334,335,335,338,338,338,338,339,339,340,340,343,343,344,344,348,348,349,349,351,351,351,351,353,353,353,353,354,354,354,354,355,355,355,355,356,356,358,358,359,359,360,360,360,360,361,361,362,362,365,365,365,365,366,366,366,366,367,367,367,367,370,370,370,370,371,371,371,371,372,372,373,373,373,373,374,374,374,374,375,375,376,376,378,378,378,378,379,379,380,380,380,380,381,381,381,381,382,382,383,383,385,385,385,385,386,386,387,387,387,387,388,388,388,388,389,389,390,390,392,392,392,392,393,393,394,394,394,394,395,395,395,395,396,396,397,397,399,399,399,399,400,400,401,401,401,401,402,402,402,402,403,403,404,404,406,406,406,406,407,407,408,408,408,408,409,409,409,409,410,410,411,411,413,413,413,413,414,414,415,415,415,415,416,416,416,416,417,417,418,418,420,420,420,420,421,421,422,422,422,422,423,423,423,423,424,424,425,425,427,427,428,428,429,429,432,432,432,432,433,433,433,433,434,434,434,434,435,435,437,437,441,441,442,442,444,444,445,445,447,447,451,451,453,453,453,453,454,454,457,457,458,458,459,459,460,460,462,462,464,464,467,467,470,470,470,470,471,471,471,471,472,472,473,473,474,474,477,477,477,477,478,478,478,478,480,480,481,481,481,481,482,482,483,483,484,484,484,484,485,485,486,486,487,487,488,488],"originalFile":"","originalLineNumbers":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"globals":[],"locals}}